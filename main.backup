#include <Arduino.h>

#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#include <Servo.h>
#include <SoftwareSerial.h>

#define LM35_PIN A1
#define NTC_THERMISTOR_PIN A2
#define DHT11_PIN 11
#define FUSE_SERVO_PIN 5
#define BUZZER_PIN 9

#define DHT_TYPE DHT11

DHT_Unified dht(DHT11_PIN, DHT_TYPE);

uint32_t delayMS;
SoftwareSerial hm10Serial(2, 3);
float c1 = -2.472347226e-3, c2 = 8.293492561e-4, c3 = -23.22534522e-7;
float R1 = 10000; // value of R1 on board
float logR2, R2;

Servo fuseServo;
void setup()
{
  // put your setup code here, to run once:
  Serial.begin(9600);
  pinMode(BUZZER_PIN, OUTPUT);
  dht.begin();
  fuseServo.attach(FUSE_SERVO_PIN);
  sensor_t sensor;

  dht.temperature().getSensor(&sensor);
  Serial.println(F("------------------------------------"));
  Serial.println(F("Temperature Sensor"));
  Serial.print(F("Sensor Type: "));
  Serial.println(sensor.name);
  Serial.print(F("Driver Ver:  "));
  Serial.println(sensor.version);
  Serial.print(F("Unique ID:   "));
  Serial.println(sensor.sensor_id);
  Serial.print(F("Max Value:   "));
  Serial.print(sensor.max_value);
  Serial.println(F("°C"));
  Serial.print(F("Min Value:   "));
  Serial.print(sensor.min_value);
  Serial.println(F("°C"));
  Serial.print(F("Resolution:  "));
  Serial.print(sensor.resolution);
  Serial.println(F("°C"));
  Serial.println(F("------------------------------------"));
  // Print humidity sensor details.
  dht.humidity().getSensor(&sensor);
  Serial.println(F("Humidity Sensor"));
  Serial.print(F("Sensor Type: "));
  Serial.println(sensor.name);
  Serial.print(F("Driver Ver:  "));
  Serial.println(sensor.version);
  Serial.print(F("Unique ID:   "));
  Serial.println(sensor.sensor_id);
  Serial.print(F("Max Value:   "));
  Serial.print(sensor.max_value);
  Serial.println(F("%"));
  Serial.print(F("Min Value:   "));
  Serial.print(sensor.min_value);
  Serial.println(F("%"));
  Serial.print(F("Resolution:  "));
  Serial.print(sensor.resolution);
  Serial.println(F("%"));
  dht.humidity().getSensor(&sensor);

  delayMS = sensor.min_delay / 1000;
  if (delayMS < 3000)
    delayMS = 3000;
}
int pos;
void loop()
{
  if (hm10Serial.available())
  {
    Serial.write(hm10Serial.read());
  }

  if (Serial.available())
  {
    hm10Serial.print("AT");
    char ch;
    ch = Serial.read();
    Serial.write(ch);
    hm10Serial.write(ch);
  }
  return;

  /*
  fuseServo.write(48);
  delay(1000);
  fuseServo.write(248);
  delay(3000);
  return;*/
  /*
  delay(3000);
  tone(BUZZER_PIN, 1500);
  delay(100);
  tone(BUZZER_PIN, 2000);
  delay(100);
  tone(BUZZER_PIN, 3000);
  delay(100);
  tone(BUZZER_PIN, 3500);
  delay(100);
  tone(BUZZER_PIN, 4000);
  delay(100);
*/
  sensors_event_t event;
  dht.temperature().getEvent(&event);
  if (isnan(event.temperature))
  {
    Serial.println(F("Temp oopsies"));
  }
  else
  {
    Serial.print("Temperature: ");
    Serial.print(event.temperature);
    Serial.println(" Celsius");
  }
  delay(50);
  dht.humidity().getEvent(&event);
  if (isnan(event.relative_humidity))
  {
    Serial.println(F("Humidity oopsies"));
  }
  else
  {
    Serial.print("Humidity: ");
    Serial.print(event.temperature);
    Serial.println(" %");
  }

  delay(1000);
  float reading = analogRead(LM35_PIN);
  reading = analogRead(LM35_PIN);
  float voltage = reading * (5000 / 1024.0);
  float temperature = voltage / 10 + 1;
  Serial.print("LM35 Temp: ");
  Serial.print(temperature);
  Serial.println(" Celsius");

  delay(1000);
  reading = analogRead(NTC_THERMISTOR_PIN);
  reading = analogRead(NTC_THERMISTOR_PIN);

  voltage = reading * (5.0 / 1023.0);
  R2 = voltage / (5.0 - voltage) * R1;

  logR2 = log(R2);
  temperature = (1.0 / (c1 + c2 * logR2 + c3 * logR2 * logR2 * logR2));
  temperature = temperature - 273.15;
  Serial.println("NTC Voltage: ");
  Serial.print(voltage);
  Serial.println(" V");

  Serial.println("NTC Temp: ");
  Serial.print(temperature);
  Serial.println(" Celcius");

  Serial.println("NTC Resistance: ");
  Serial.print(R2);
  Serial.println(" Ohms");

  Serial.println("-----------");
  noTone(BUZZER_PIN);
}
